# Lab Manual: Vulnerability Testing for the Lab Management System

This manual guides you through hands-on testing of the intentionally vulnerable Lab Management System. **Do not use this system in production.**

---

## Table of Contents

1. [User Enumeration](#user-enumeration)
2. [Authorization Bypass](#authorization-bypass)
3. [Data Exposure](#data-exposure)
4. [Security Configuration Review](#security-configuration-review)

---

## 1. User Enumeration

### 1.1 Try the Login Form with Different Usernames

- Go to the login page (`/login`).
- Enter a valid username and an invalid password. Observe the error message.
- Enter a non-existent username and any password. Compare the error message.
- **Goal:** Determine if the system reveals whether a username exists.

### 1.2 Check the Registration Endpoint Response

- Go to the registration page (`/register`).
- Try registering with a username that already exists.
- Try registering with a new username.
- Observe if the system gives different responses for existing vs. new usernames.
- **Goal:** Identify if the registration leaks information about existing users.

### 1.3 Examine User Listing API Responses

- Access the API endpoint: `GET /api/users`
- Observe if the endpoint lists all users without authentication.
- Try searching or filtering users (if supported).
- **Goal:** See if you can enumerate all user accounts.

---

## 2. Authorization Bypass

### 2.1 Modify User Roles Through Direct API Calls

- Log in as a regular user.
- Use browser dev tools or tools like Postman to send a `PATCH` request to `/api/users/[id]` with a new role (e.g., "admin").
- Check if your role changes without proper authorization.
- **Goal:** Test if role changes are restricted.

### 2.2 Access Admin Endpoints Without Proper Authentication

- Log out or use a non-admin account.
- Try accessing admin-only pages or endpoints (e.g., `/dashboard/users`, `/api/roles`).
- Observe if access is granted or denied.
- **Goal:** Identify missing access controls.

### 2.3 Try Accessing Other Users' Data

- As a logged-in user, try accessing another user's data via `/api/users/[other_id]`.
- Attempt to delete or modify another user's account.
- **Goal:** Test for insecure direct object references (IDOR).

---

## 3. Data Exposure

### 3.1 Check API Responses for Sensitive Information

- Make requests to various API endpoints (e.g., `/api/users`, `/api/labs`).
- Look for sensitive data in the responses (passwords, tokens, internal IDs).
- **Goal:** Identify information disclosure.

### 3.2 Attempt SQL Injection in Search Fields

- Use search or filter features in the UI or API (e.g., search users or labs).
- Enter SQL injection payloads like `' OR 1=1--` or `'; DROP TABLE users;--`.
- Observe the responses and error messages.
- **Goal:** Test for SQL injection vulnerabilities.

### 3.3 Examine Error Messages for System Information

- Cause errors intentionally (e.g., malformed requests, invalid IDs).
- Observe if error messages reveal stack traces, SQL queries, or server details.
- **Goal:** Identify leakage of internal system information.

---

## 4. Security Configuration Review

- Review the [README](./README.md) for a list of intentionally weak security settings:
  - JWT tokens without expiration
  - Plain text password storage
  - No input validation
  - Missing CSRF protection
  - Vulnerable to injection attacks

- **Goal:** Understand the risks and how these weaknesses can be exploited.

---

## Notes

- Use tools like browser dev tools, Postman, or curl for API testing.
- Document your findings and screenshots for each vulnerability.
- Discuss how these vulnerabilities could be mitigated in a real-world system.

---

**This lab is for educational purposes only. Do not deploy or use in production environments.**